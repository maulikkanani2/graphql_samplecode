---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: PRO_GRAPHQL_LAMBDA
Parameters:
  AppName:
    Type: String
Resources:

  ApiAuthorizer: 
    Type: "AWS::ApiGateway::Authorizer"
    Properties: 
      AuthorizerResultTtlInSeconds: 300
      IdentitySource: method.request.header.Authorization
      Name: CognitoDefaultUserPoolAuthorizer
      ProviderARNs: 
        - "arn:aws:cognito-idp:ap-southeast-2:466733055650:userpool/ap-southeast-2_J8hg3FdaJ"
      RestApiId: !Ref ApiGatewayApi
      Type: "COGNITO_USER_POOLS"

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: 2.0
        info:
          title:
            Fn::Sub: ${AWS::StackName}-lambda-function
        basePath: /prod
        schemes:
        - https
        paths:
          '/{proxy+}':
            post:
              produces:
              - application/json
              parameters:
              - name: proxy
                in: path
                required: true
                type: string
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                    default:
                      statusCode: 200
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
  ScheduledRule: 
      Type: AWS::Events::Rule
      Properties: 
        Description: ScheduledRule
        ScheduleExpression: "rate(10 minutes)"
        State: ENABLED
        Targets: 
          - 
            Arn: 
              Fn::GetAtt: 
                - LambdaFunction
                - Arn
            Id: TargetFunctionV1
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: LambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: 
        Fn::GetAtt: 
          - ScheduledRule
          - Arn
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - ec2:DescribeInstances
            - ec2:CreateNetworkInterface
            - ec2:AttachNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments            
            Resource: '*'

  LambdaApiGatewayExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref ApiGatewayApi
          - "/*/*"

  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src
      Handler: lambda.myHandler
      MemorySize: 1024
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Events:
        ProxyApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY
      Environment:
        Variables:
          DB_HOST: 
            Fn::ImportValue: !Sub '${AppName}-DatabaseHostname'
          DB_USER: 
            Fn::ImportValue: !Sub "${AppName}-DatabaseUsername"
          DB_PASSWORD: 
            Fn::ImportValue: !Sub "${AppName}-DatabaseUserPassword"
          S3_BUCKET: 'pro-integration'     
      VpcConfig:
        SecurityGroupIds:
          - "Fn::ImportValue": !Sub "${AppName}-DatabaseAccessSecurityGroup"
        SubnetIds:
          - "Fn::ImportValue": !Sub "${AppName}-PrivateSubnet1"
          - "Fn::ImportValue": !Sub "${AppName}-PrivateSubnet2"
          - "Fn::ImportValue": !Sub "${AppName}-PrivateSubnet3"


Outputs:
  LambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Join
      - ''
      - - https://
        - !Ref AWS::Region
        - ".console.aws.amazon.com/lambda/home?region="
        - !Ref AWS::Region
        - "#/functions/"
        - !Ref LambdaFunction

  ApiGatewayApiConsoleUrl:
    Description: Console URL for the API Gateway.
    Value: !Join
      - ''
      - - https://
        - !Ref AWS::Region
        - ".console.aws.amazon.com/apigateway/home?region="
        - !Ref AWS::Region
        - "#/apis/"
        - !Ref ApiGatewayApi
        - "/stages/prod"

  ApiUrl:
    Description: Invoke URL for your API. Clicking this link will perform a GET request
      on the root resource of your API.
    Value: !Join
      - ''
      - - https://
        - !Ref ApiGatewayApi
        - ".execute-api."
        - !Ref AWS::Region
        - ".amazonaws.com/prod/"
